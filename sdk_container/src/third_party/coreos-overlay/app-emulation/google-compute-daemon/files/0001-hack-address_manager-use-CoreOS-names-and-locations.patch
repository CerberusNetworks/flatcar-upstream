From 265f951bc8d55bfb988050dda6332511b58e72e8 Mon Sep 17 00:00:00 2001
From: Brandon Philips <brandon@ifup.co>
Date: Tue, 1 Apr 2014 15:18:20 -0700
Subject: [PATCH] hack(address_manager): use CoreOS names and locations

ip is in /usr/bin/ip and the network interface is ens4v1 via
http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/
---
 .../share/google/google_daemon/address_manager.py  | 24 +++++++++++-----------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/google-daemon/usr/share/google/google_daemon/address_manager.py b/google-daemon/usr/share/google/google_daemon/address_manager.py
index 1b3997c..568720d 100644
--- a/google-daemon/usr/share/google/google_daemon/address_manager.py
+++ b/google-daemon/usr/share/google/google_daemon/address_manager.py
@@ -15,16 +15,16 @@
 """Manage extra network interface addresses on a GCE instance.
 
 Fetch a list of public endpoint IPs from the metadata server, compare it with
-what's configured on eth0, and add/remove addresses from eth0 to make them
+what's configured on ens4v1, and add/remove addresses from ens4v1 to make them
 match.  Only remove those which match our proto code.
 
 This must be run by root. If it reads any malformed data, it will take no
 action.
 
 Command used to add ips:
-  ip route add to local $IP/32 dev eth0 proto 66
+  ip route add to local $IP/32 dev ens4v1 proto 66
 Command used to fetch list of configured IPs:
-  ip route ls table local type local dev eth0 scope host proto 66
+  ip route ls table local type local dev ens4v1 scope host proto 66
 """
 
 
@@ -103,8 +103,8 @@ class AddressManager(object):
     return self.ParseIPAddrs(addrs_data)
 
   def ReadLocalConfiguredAddrs(self):
-    """Fetch list of addresses we've configured on eth0 already."""
-    cmd = ('/sbin/ip route ls table local type local dev eth0 scope host ' +
+    """Fetch list of addresses we've configured on ens4v1 already."""
+    cmd = ('/usr/bin/ip route ls table local type local dev ens4v1 scope host ' +
            'proto %d' % GOOGLE_PROTO_ID)
     result = self.system.RunCommand(cmd.split())
     if self.IPCommandFailed(result, cmd):
@@ -132,27 +132,27 @@ class AddressManager(object):
             to_remove or None))
 
   def AddAddresses(self, to_add):
-    """Configure new addresses on eth0."""
+    """Configure new addresses on ens4v1."""
     for addr in to_add:
        self.AddOneAddress(addr)
 
   def AddOneAddress(self, addr):
-    """Configure one address on eth0."""
-    cmd = '/sbin/ip route add to local %s/32 dev eth0 proto %d' % (
+    """Configure one address on ens4v1."""
+    cmd = '/usr/bin/ip route add to local %s/32 dev ens4v1 proto %d' % (
         addr, GOOGLE_PROTO_ID)
     result = self.system.RunCommand(cmd.split())
     self.IPCommandFailed(result, cmd)  # Ignore return code
 
   def DeleteAddresses(self, to_remove):
-    """Un-configure a list of addresses from eth0."""
+    """Un-configure a list of addresses from ens4v1."""
     for addr in to_remove:
       self.DeleteOneAddress(addr)
 
   def DeleteOneAddress(self, addr):
-    """Delete one address from eth0."""
+    """Delete one address from ens4v1."""
     # This will fail if it doesn't match exactly the specs listed.
     # That'll help ensure we don't remove one added by someone else.
-    cmd = '/sbin/ip route delete to local %s/32 dev eth0 proto %d' % (
+    cmd = '/usr/bin/ip route delete to local %s/32 dev ens4v1 proto %d' % (
         addr, GOOGLE_PROTO_ID)
     result = self.system.RunCommand(cmd.split())
     self.IPCommandFailed(result, cmd)  # Ignore return code
@@ -168,7 +168,7 @@ class AddressManager(object):
     return addrs
 
   def IPCommandFailed(self, result, cmd):
-    """If an /sbin/ip command failed, log and return True."""
+    """If an /usr/bin/ip command failed, log and return True."""
     if self.system.RunCommandFailed(
         result, 'Non-zero exit status from: "%s"' % cmd):
       return True
-- 
1.8.5.2 (Apple Git-48)

