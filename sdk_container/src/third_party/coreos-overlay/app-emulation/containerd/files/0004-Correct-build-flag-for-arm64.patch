From 313db3df26b12293e7d99eab0647f5222f195648 Mon Sep 17 00:00:00 2001
From: Qiang Huang <h.huangqiang@huawei.com>
Date: Fri, 29 Apr 2016 11:42:41 +0000
Subject: [PATCH 4/4] Correct build flag for arm64

On arm64, the default build flag is the same as the one from
`go env` which is arm64. So we should use arm64 instead of
aarch64 for both build flag and file name.

Signed-off-by: Qiang Huang <h.huangqiang@huawei.com>
---
 archutils/epoll.go         |  2 +-
 archutils/epoll_aarch64.go | 70 ----------------------------------------------
 archutils/epoll_arm64.go   | 70 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 71 insertions(+), 71 deletions(-)
 delete mode 100644 archutils/epoll_aarch64.go
 create mode 100644 archutils/epoll_arm64.go

diff --git a/archutils/epoll.go b/archutils/epoll.go
index 6bb6047..c8ade64 100644
--- a/archutils/epoll.go
+++ b/archutils/epoll.go
@@ -1,4 +1,4 @@
-// +build linux,!aarch64
+// +build linux,!arm64
 
 package archutils
 
diff --git a/archutils/epoll_aarch64.go b/archutils/epoll_aarch64.go
deleted file mode 100644
index 3d63147..0000000
--- a/archutils/epoll_aarch64.go
+++ /dev/null
@@ -1,70 +0,0 @@
-// +build linux,aarch64
-
-package archutils
-
-// #include <sys/epoll.h>
-/*
-int EpollCreate1(int flag) {
-	return epoll_create1(flag);
-}
-
-int EpollCtl(int efd, int op,int sfd, int events, int fd) {
-	struct epoll_event event;
-	event.events = events;
-	event.data.fd = fd;
-
-	return epoll_ctl(efd, op, sfd, &event);
-}
-
-struct event_t {
-	uint32_t events;
-	int fd;
-};
-
-struct epoll_event events[128];
-int run_epoll_wait(int fd, struct event_t *event) {
-	int n, i;
-	n = epoll_wait(fd, events, 128, -1);
-	for (i = 0; i < n; i++) {
-		event[i].events = events[i].events;
-		event[i].fd = events[i].data.fd;
-	}
-	return n;
-}
-*/
-import "C"
-
-import (
-	"fmt"
-	"syscall"
-	"unsafe"
-)
-
-func EpollCreate1(flag int) (int, error) {
-	fd := int(C.EpollCreate1(C.int(flag)))
-	if fd < 0 {
-		return fd, fmt.Errorf("failed to create epoll, errno is %d", fd)
-	}
-	return fd, nil
-}
-
-func EpollCtl(epfd int, op int, fd int, event *syscall.EpollEvent) error {
-	errno := C.EpollCtl(C.int(epfd), C.int(syscall.EPOLL_CTL_ADD), C.int(fd), C.int(event.Events), C.int(event.Fd))
-	if errno < 0 {
-		return fmt.Errorf("Failed to ctl epoll")
-	}
-	return nil
-}
-
-func EpollWait(epfd int, events []syscall.EpollEvent, msec int) (int, error) {
-	var c_events [128]C.struct_event_t
-	n := int(C.run_epoll_wait(C.int(epfd), (*C.struct_event_t)(unsafe.Pointer(&c_events))))
-	if n < 0 {
-		return int(n), fmt.Errorf("Failed to wait epoll")
-	}
-	for i := 0; i < n; i++ {
-		events[i].Fd = int32(c_events[i].fd)
-		events[i].Events = uint32(c_events[i].events)
-	}
-	return int(n), nil
-}
diff --git a/archutils/epoll_arm64.go b/archutils/epoll_arm64.go
new file mode 100644
index 0000000..00abc68
--- /dev/null
+++ b/archutils/epoll_arm64.go
@@ -0,0 +1,70 @@
+// +build linux,arm64
+
+package archutils
+
+// #include <sys/epoll.h>
+/*
+int EpollCreate1(int flag) {
+	return epoll_create1(flag);
+}
+
+int EpollCtl(int efd, int op,int sfd, int events, int fd) {
+	struct epoll_event event;
+	event.events = events;
+	event.data.fd = fd;
+
+	return epoll_ctl(efd, op, sfd, &event);
+}
+
+struct event_t {
+	uint32_t events;
+	int fd;
+};
+
+struct epoll_event events[128];
+int run_epoll_wait(int fd, struct event_t *event) {
+	int n, i;
+	n = epoll_wait(fd, events, 128, -1);
+	for (i = 0; i < n; i++) {
+		event[i].events = events[i].events;
+		event[i].fd = events[i].data.fd;
+	}
+	return n;
+}
+*/
+import "C"
+
+import (
+	"fmt"
+	"syscall"
+	"unsafe"
+)
+
+func EpollCreate1(flag int) (int, error) {
+	fd := int(C.EpollCreate1(C.int(flag)))
+	if fd < 0 {
+		return fd, fmt.Errorf("failed to create epoll, errno is %d", fd)
+	}
+	return fd, nil
+}
+
+func EpollCtl(epfd int, op int, fd int, event *syscall.EpollEvent) error {
+	errno := C.EpollCtl(C.int(epfd), C.int(syscall.EPOLL_CTL_ADD), C.int(fd), C.int(event.Events), C.int(event.Fd))
+	if errno < 0 {
+		return fmt.Errorf("Failed to ctl epoll")
+	}
+	return nil
+}
+
+func EpollWait(epfd int, events []syscall.EpollEvent, msec int) (int, error) {
+	var c_events [128]C.struct_event_t
+	n := int(C.run_epoll_wait(C.int(epfd), (*C.struct_event_t)(unsafe.Pointer(&c_events))))
+	if n < 0 {
+		return int(n), fmt.Errorf("Failed to wait epoll")
+	}
+	for i := 0; i < n; i++ {
+		events[i].Fd = int32(c_events[i].fd)
+		events[i].Events = uint32(c_events[i].events)
+	}
+	return int(n), nil
+}
-- 
2.8.3

