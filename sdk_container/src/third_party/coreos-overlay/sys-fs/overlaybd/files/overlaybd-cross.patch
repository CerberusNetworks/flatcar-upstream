From de68119855229db8e457043d86bbb38bbd5d55d9 Mon Sep 17 00:00:00 2001
From: James Le Cuirot <jlecuirot@microsoft.com>
Date: Fri, 25 Jul 2025 17:12:03 +0100
Subject: [PATCH 1/3] Fix cross-compiling by using CMAKE_SYSTEM_PROCESSOR
 rather than uname -m

There is no need to check the architecture twice. Also check for arm64
(MacOS) wherever we check for aarch64 (Linux).

Signed-off-by: James Le Cuirot <jlecuirot@microsoft.com>
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,10 +9,8 @@ enable_language(C)
 set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")
 set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -DNDEBUG -g")
 
-# Get CPU arch
-execute_process(COMMAND uname -m OUTPUT_VARIABLE ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
-if (NOT (${ARCH} STREQUAL x86_64) AND NOT (${ARCH} STREQUAL aarch64) AND NOT (${ARCH} STREQUAL arm64))
-    message(FATAL_ERROR "Unknown CPU architecture ${ARCH}")
+if (NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64) AND NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL aarch64) AND NOT (CMAKE_SYSTEM_PROCESSOR STREQUAL arm64))
+    message(FATAL_ERROR "Unknown CPU architecture ${CMAKE_SYSTEM_PROCESSOR}")
 endif ()
 
 option(OBD_VER "Overlaybd version" "overlaybd/0.0.0-undefined")
@@ -25,7 +23,7 @@ set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/CMake")
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic -Wall -Werror=sign-compare")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic -Wall -Werror=sign-compare -DOVERLAYBD_VER=${OBD_VER}")
 
-if (${ARCH} STREQUAL aarch64)
+if ((CMAKE_SYSTEM_PROCESSOR STREQUAL aarch64) OR (CMAKE_SYSTEM_PROCESSOR STREQUAL arm64))
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a+crc -fsigned-char -fno-stack-protector -fomit-frame-pointer")
 endif ()
 
--- a/src/overlaybd/zfile/CMakeLists.txt
+++ b/src/overlaybd/zfile/CMakeLists.txt
@@ -2,19 +2,13 @@ file(GLOB SOURCE_ZFILE "*.cpp")
 file(GLOB SOURCE_LZ4 "lz4/*.c")
 file(GLOB SOURCE_CRC32 "crc32/crc32c.cpp")
 
-# Get CPU arch
-execute_process(COMMAND uname -m OUTPUT_VARIABLE ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
-if (NOT (${ARCH} STREQUAL x86_64) AND NOT (${ARCH} STREQUAL aarch64))
-    message(FATAL_ERROR "Unknown CPU architecture ${ARCH}")
-endif ()
-
 set (CMAKE_CXX_STANDARD 17)
 add_library(crc32_lib STATIC ${SOURCE_CRC32})
 target_include_directories(crc32_lib PUBLIC
     ${PHOTON_INCLUDE_DIR}
 )
 
-if (${ARCH} STREQUAL x86_64)
+if (CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
     target_compile_options(crc32_lib PUBLIC -msse4.2 -mcrc32)
 else()
     target_compile_options(crc32_lib PRIVATE -march=native -mcpu=generic+crc)
-- 
2.49.0


From ee0e074c256ea1bcbcff2ed5a3e311becaf122cc Mon Sep 17 00:00:00 2001
From: James Le Cuirot <jlecuirot@microsoft.com>
Date: Mon, 28 Jul 2025 12:05:19 +0100
Subject: [PATCH 2/3] Respect aarch64 -march=|-mcpu= flag and check whether
 -mcpu=native works

Packagers may specify a target system up front, which should be
respected. The CRC extensions are not strictly necessary as there is a
software fallback.

Otherwise, use -mcpu=native if it works (it won't when cross-compiling)
or -mcpu=generic+crc.

Signed-off-by: James Le Cuirot <jlecuirot@microsoft.com>
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,7 +24,16 @@ set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic -Wall -Werror=sign-compare")
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic -Wall -Werror=sign-compare -DOVERLAYBD_VER=${OBD_VER}")
 
 if ((CMAKE_SYSTEM_PROCESSOR STREQUAL aarch64) OR (CMAKE_SYSTEM_PROCESSOR STREQUAL arm64))
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a+crc -fsigned-char -fno-stack-protector -fomit-frame-pointer")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsigned-char -fno-stack-protector -fomit-frame-pointer")
+    if (NOT CMAKE_CXX_FLAGS MATCHES "-march=|-mcpu=")
+        include(CheckCXXCompilerFlag)
+        check_cxx_compiler_flag(-mcpu=native COMPILER_HAS_NATIVE_FLAG)
+        if (COMPILER_HAS_NATIVE_FLAG)
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=native")
+        else ()
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=generic+crc")
+        endif ()
+    endif ()
 endif ()
 
 set(CMAKE_CXX_STANDARD_LIBRARIES "-static-libgcc ${CMAKE_CXX_STANDARD_LIBRARIES}")
--- a/src/overlaybd/zfile/CMakeLists.txt
+++ b/src/overlaybd/zfile/CMakeLists.txt
@@ -10,8 +10,6 @@ target_include_directories(crc32_lib PUBLIC
 
 if (CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
     target_compile_options(crc32_lib PUBLIC -msse4.2 -mcrc32)
-else()
-    target_compile_options(crc32_lib PRIVATE -march=native -mcpu=generic+crc)
 endif()
 
 if(ENABLE_DSA OR ENABLE_ISAL)
-- 
2.49.0


From 2e4edd416a42fad0e8d7ac21855a4e81f34f1e82 Mon Sep 17 00:00:00 2001
From: James Le Cuirot <jlecuirot@microsoft.com>
Date: Mon, 28 Jul 2025 12:16:50 +0100
Subject: [PATCH 3/3] Patch Photon after fetching to fix cross issues

Signed-off-by: James Le Cuirot <jlecuirot@microsoft.com>
--- a/CMake/Findphoton.cmake
+++ b/CMake/Findphoton.cmake
@@ -6,6 +6,7 @@ FetchContent_Declare(
   photon
   GIT_REPOSITORY https://github.com/alibaba/PhotonLibOS.git
   GIT_TAG v0.6.17
+  PATCH_COMMAND patch -p1 -i @FILESDIR@/photon-cross.patch
 )
 
 if(BUILD_TESTING)
-- 
2.49.0


From 32a592ef523a14600ce658a695d827724aeb66c9 Mon Sep 17 00:00:00 2001
From: Krzesimir Nowak <knowak@microsoft.com>
Date: Fri, 8 Aug 2025 16:47:58 +0200
Subject: [PATCH] Patch libtcmu after fetching to fix memory issues

---
 CMake/Findtcmu.cmake | 1 +
 1 file changed, 1 insertion(+)

diff --git a/CMake/Findtcmu.cmake b/CMake/Findtcmu.cmake
index 6e8f0ef..5865a9b 100644
--- a/CMake/Findtcmu.cmake
+++ b/CMake/Findtcmu.cmake
@@ -5,6 +5,7 @@ FetchContent_Declare(
   tcmu
   GIT_REPOSITORY https://github.com/data-accelerator/photon-libtcmu.git
   GIT_TAG main
+  PATCH_COMMAND patch -p1 -i @FILESDIR@/tcmu-fix.patch
 )
 
 if(BUILD_TESTING)
-- 
2.49.1

